<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用SSL证书将http网站转成https网站</title>
      <link href="/2020/04/18/shi-yong-ssl-zheng-shu-jiang-http-wang-zhan-zhuan-cheng-https-wang-zhan/"/>
      <url>/2020/04/18/shi-yong-ssl-zheng-shu-jiang-http-wang-zhan-zhuan-cheng-https-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="使用SSL证书将http网站转成https网站"><a href="#使用SSL证书将http网站转成https网站" class="headerlink" title="使用SSL证书将http网站转成https网站"></a>使用SSL证书将http网站转成https网站</h1><h2 id="1-http和https的基本概念"><a href="#1-http和https的基本概念" class="headerlink" title="1. http和https的基本概念"></a>1. http和https的基本概念</h2><blockquote><p>http</p></blockquote><p>http是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><blockquote><p>https</p></blockquote><p>https是以安全为目标的http通道，简单讲是http的安全版，即http下加入SSL层，https的安全基础是SSL，因此加密的详细内容就需要SSL。</p><blockquote><p>http和https的区别主要如下：</p></blockquote><ol><li>https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用,本教程是基于阿里云免费的SSL证书讲述的。</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，http用的是80端口，而https是用的443端口。</li><li>http的连接很简单，是无状态的；https协议是由SSL+http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ol><p>说了这么多其实就一句话：https是http的安全版。</p><h2 id="2-申请SSL证书"><a href="#2-申请SSL证书" class="headerlink" title="2. 申请SSL证书"></a>2. 申请SSL证书</h2><p>大多数企业级的SSL证书都是要钱的，而且对于个人开发者来说都不便宜。我使用的SSL证书是免费的，用的阿里云；另外有一些也是免费的，比如七牛云、腾讯云等，都有提供免费证书的申请接口。</p><p>传送门</p><p><a href="https://common-buy.aliyun.com/?spm=a2c4e.11153940.0.0.2557748fMtvgVX&commodityCode=cas#/buy" target="_blank" rel="noopener">阿里云免费SSL证书购买地址</a></p><p><img src="/2020/04/18/shi-yong-ssl-zheng-shu-jiang-http-wang-zhan-zhuan-cheng-https-wang-zhan/ssl.png" class title="购买证书 % }&lt;&#x2F;p&gt; &lt;p&gt;如箭头所示，选择免费版（个人）DV，然后点立即购买–&gt;同意云盾证书服务协议–&gt;去支付,支付成功后去证书控制台进行配置。&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img zhifu.png 支付 % }&lt;&#x2F;p&gt; &lt;p&gt;接下来点击证书申请，如下图：&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img shenqing.png 申请 % }&lt;&#x2F;p&gt; &lt;p&gt;填写相关信息，包括证书要绑定的域名等，如下图&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img message.png 填写申请 % }&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img moren.png 这里默认就行 % }&lt;&#x2F;p&gt; &lt;p&gt;接着，下一步–&gt;验证–&gt;提交审核，签发后是这个样子，如图：&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img download.png 下载证书 % }&lt;&#x2F;p&gt; &lt;p&gt;点击下载，下载证书和密钥，找到对应的服务器类型下载就行，我的阿里云装的nginx，我以nginx为例&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img 001.png 下载 % }&lt;&#x2F;p&gt; &lt;p&gt;下载后得到一个压缩包，解压后里面有两个文件：&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img 002.png 证书和密钥 % }&lt;&#x2F;p&gt; &lt;p&gt;先放着，待会有用&lt;&#x2F;p&gt; &lt;p&gt;回到证书签发页面，点击部署，选择负载均衡&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img 003.png 负载均衡 % }&lt;&#x2F;p&gt; &lt;p&gt;选择你服务器所在的地方&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img 004.png 你服务器所在地 % }&lt;&#x2F;p&gt; &lt;h2 id&#x3D;3-安装SSL证书&gt;&lt;a href&#x3D;#3-安装SSL证书 class&#x3D;headerlink title&#x3D;3. 安装SSL证书&gt;&lt;&#x2F;a&gt;3. 安装SSL证书&lt;&#x2F;h2&gt;&lt;p&gt;在阿里云你的nginx的安装目录下创建文件夹cert,我的路径是 &#x2F;etc&#x2F;nginx&lt;&#x2F;p&gt; <pre class="line-numbers language- shell"><code class="language- shell">cd /etc/nginx/mkdir certcd certvim server.pem    //得到一个空文件，然后用Sublime Text或者notpad++打开刚才下载的以.pem为后缀的文件，将里面的内容全部复制到新创建的server.pem文件中，保存退出vim server.key    //同理，将刚才下载的.key文件中的内容复制到server.key文件中，:wq 保存退出 <p>打开nginx的配置文件<&#x2F;p> <pre><code class="shell">vim /etc/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>找到这里：</p><pre class="line-numbers language-shell"><code class="language-shell"># HTTPS server# #server {# listen 443;# server_name localhost;# ssl on;# ssl_certificate cert.pem;# ssl_certificate_key cert.key;# ssl_session_timeout 5m;# ssl_protocols SSLv2 SSLv3 TLSv1;# ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;# ssl_prefer_server_ciphers on;# location / {###}#}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> &lt;p&gt;去掉注释，结合自己的实际情况配置，我的配置如下图：&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img 005.png 我的配置 % }&lt;&#x2F;p&gt; &lt;p&gt;做几点说明：1.2.3.4处需要你自己修改，域名填你自己的，root是你项目的路径，ssl_certificate填刚才证书的位置，ssl_certificate_key填刚才密钥的位置。最后将80端口那里的配置注释掉，我的如下：&lt;&#x2F;p&gt; &lt;p&gt;{% asset_img 006.png 我的配置 % }&lt;&#x2F;p&gt; &lt;p&gt;保存退出，重启nginx，&lt;&#x2F;p&gt; <pre class="line-numbers language-shell"><code class="language-shell">nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> &lt;p&gt;然后打开浏览器输入https:&#x2F;&#x2F;你的域名,至此,nginx的https就可以使用了,默认443端口**。&lt;&#x2F;p&gt;">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>将hexo部署到阿里云</title>
      <link href="/2020/04/18/jiang-hexo-bo-ke-bu-shu-dao-a-li-yun/"/>
      <url>/2020/04/18/jiang-hexo-bo-ke-bu-shu-dao-a-li-yun/</url>
      
        <content type="html"><![CDATA[<h1 id="将hexo博客部署到阿里云"><a href="#将hexo博客部署到阿里云" class="headerlink" title="将hexo博客部署到阿里云"></a>将hexo博客部署到阿里云</h1><blockquote><p>部署的前提是：你买了阿里云的ECS服务器，买了域名，并且解析了域名。</p></blockquote><h2 id="服务器端（阿里云）nginx的配置"><a href="#服务器端（阿里云）nginx的配置" class="headerlink" title="服务器端（阿里云）nginx的配置"></a>服务器端（阿里云）nginx的配置</h2><p>首先登陆你的阿里云，安装nginx，使用下列命令安装</p><pre class="line-numbers language-go"><code class="language-go">yum install <span class="token operator">-</span>y nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装好了nginx后，创建文件目录，用来存放博客站点文件。</p><pre class="line-numbers language-go"><code class="language-go">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>mkdir myblogchmod <span class="token number">775</span> <span class="token operator">-</span>R <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>myblog<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加文件index.html，用来检测nginx是否配置成功</p><pre class="line-numbers language-java"><code class="language-java">vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>myblog<span class="token operator">/</span>index<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加如下代码并保存</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Nginx is running<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置nginx服务器：</p><p>找到nginx的配置文件，例如我的是在： /etc/nginx 目录下，有个nginx.conf文件</p><p>用vim编辑器打开它</p><pre class="line-numbers language-java"><code class="language-java">vim <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改两个地方，server_name和root, 我的配置如下</p><pre class="line-numbers language-java"><code class="language-java">   server <span class="token punctuation">{</span>       listen       <span class="token number">80</span> default_server<span class="token punctuation">;</span>        listen       <span class="token punctuation">[</span><span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">80</span> default_server<span class="token punctuation">;</span>        server_name  www<span class="token punctuation">.</span>moschao<span class="token punctuation">.</span>gold<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//这里换成你自己的域名</span>        root         <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>myblog<span class="token operator">/</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这里换成你刚才创建的目录</span>        # Load configuration files <span class="token keyword">for</span> the <span class="token keyword">default</span> server block<span class="token punctuation">.</span>        include <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        error_page <span class="token number">404</span> <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>           location <span class="token operator">=</span> <span class="token operator">/</span>40x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>           location <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里监听的是80端口，所以你的服务器的安全组配置那里80端口要放行，(443端口也配置好，待会会用到)我的安全组配置如下图：</p><img src="/2020/04/18/jiang-hexo-bo-ke-bu-shu-dao-a-li-yun/ls.png" class title="安全组80端口配置"><p>启动nginx服务：</p><pre class="line-numbers language-java"><code class="language-java">service nginx start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器输入你服务器的域名或者ip看看是否呈现刚才创建的index.html的内容</p><blockquote><p>值得注意的是，每次改完nginx.conf后，要重启nginx，使配置生效，用如下命令</p></blockquote><pre class="line-numbers language-java"><code class="language-java">service nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java"><code class="language-java">systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="服务器git的配置"><a href="#服务器git的配置" class="headerlink" title="服务器git的配置"></a>服务器git的配置</h2><p>这里的目的是创建myblog.git的裸库，当只用hexo d命令推送到阿里云的时候，首先推送到这个裸库，然后使用hook将博客部署到 /usr/local/myblog目录。</p><p>安装git</p><pre class="line-numbers language-java"><code class="language-java">yum install <span class="token operator">-</span>y git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>创建文件目录，用于私人git仓库搭建，并且更改目录读写权限。</em></p><pre class="line-numbers language-java"><code class="language-java">cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>mkdir blogRepositionchmod <span class="token number">775</span> <span class="token operator">-</span>R <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>blogReposition<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>git初始化裸库</p></blockquote><pre class="line-numbers language-java"><code class="language-java">cd blogReposition<span class="token operator">/</span>git init <span class="token operator">--</span>bare myblog<span class="token punctuation">.</span>git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>创建git钩子，即hook</p></blockquote><pre class="line-numbers language-java"><code class="language-java">vim <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>blogReposition<span class="token operator">/</span>myblog<span class="token punctuation">.</span>git<span class="token operator">/</span>hooks<span class="token operator">/</span>post<span class="token operator">-</span>receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在新建的文件中输入如下代码，用于指定git的源代码和git配置文件。</p><pre class="line-numbers language-go"><code class="language-go">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>bashgit <span class="token operator">--</span>work<span class="token operator">-</span>tree<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>myblog <span class="token operator">--</span>git<span class="token operator">-</span>dir<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>blogReposition<span class="token operator">/</span>myblog<span class="token punctuation">.</span>git checkout <span class="token operator">-</span>f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存退出后，给该文件中添加可执行权限。</p><pre class="line-numbers language-django"><code class="language-django">chmod +x /usr/local/blogReposition/myblog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>管理公钥</p></blockquote><p>首先在本地客户端，使用命令 cat ~/.ssh/id_rsa.pub指令查看本地的公钥，然后复制全部内容到阿里云 /root/.ssh/authorized_keys文件中，设置/etc/ssh/sshd_config文件中PasswordAuthentications字段为yes。</p><p>这样做的目的在于下次git push或者 hexo d 到阿里云的时候就不用输入root账户的密码了。</p><h2 id="修改本地hexo博客站点的根目录配置文件-config-yml"><a href="#修改本地hexo博客站点的根目录配置文件-config-yml" class="headerlink" title="修改本地hexo博客站点的根目录配置文件_config.yml"></a>修改本地hexo博客站点的根目录配置文件_config.yml</h2><pre class="line-numbers language-java"><code class="language-java">deploy<span class="token operator">:</span>  type<span class="token operator">:</span> git  repository<span class="token operator">:</span> root<span class="token annotation punctuation">@47</span><span class="token punctuation">.</span><span class="token number">103.197</span><span class="token punctuation">.</span><span class="token number">44</span><span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>blogReposition<span class="token operator">/</span>myblog  branch<span class="token operator">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改后保存，使用hexo d命令推送到阿里云，打开浏览器输入http://你的域名,部署成功。</p><p>注意：这里用的是http协议，如果想换成https，需要先购买ssl证书，阿里云是免费购买的。</p><p>我在下篇博客中详细介绍。</p><ul><li>参考链接：<a href="https://www.zdaiot.com/Linux/博客搭建/hexo部署到阿里云/" target="_blank" rel="noopener">https://www.zdaiot.com/Linux/博客搭建/hexo部署到阿里云/</a></li></ul><p>如果有什么错误还请大家见谅，指出来，我再来订正。</p>]]></content>
      
      
      <categories>
          
          <category> hexo部署到阿里云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之字符串</title>
      <link href="/2020/04/09/c-zhi-zi-fu-chuan/"/>
      <url>/2020/04/09/c-zhi-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="C-之字符串"><a href="#C-之字符串" class="headerlink" title="C++之字符串"></a>C++之字符串</h1><h2 id="C-字符串"><a href="#C-字符串" class="headerlink" title="C++字符串"></a>C++字符串</h2><p>C++ 提供了以下两种类型的字符串表示形式：</p><ol><li>C 风格字符串</li><li>C++ 引入的 string 类类型</li></ol><blockquote><h2 id="C-风格字符串"><a href="#C-风格字符串" class="headerlink" title="C 风格字符串"></a>C 风格字符串</h2></blockquote><p>C 风格的字符串起源于 C 语言，并在 C++ 中继续得到支持。字符串实际上是使用 <strong>null</strong> 字符 ‘’ 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。</p><p>下面的声明和初始化创建了一个 “Hello” 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 “Hello” 的字符数多一个。char greeting[6] = {‘H’, ‘e’, ‘l’, ‘l’, ‘o’, ‘’};</p><p>依据数组初始化规则，你可以把上面的语句写成以下语句：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">char</span> greeting<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下是 C/C++ 中定义的字符串的内存表示：</p>{% asset_img 011.png 结果 %}<p>其实，你不需要把 <em>null</em> 字符放在字符串常量的末尾。C++ 编译器会在初始化数组时，自动把 \0放在字符串的末尾。让我们尝试输出上面的字符串</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by MacosXcode on 2020/4/9.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> greeting<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Greeting message"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> greeting <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> array <span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><img src="/2020/04/09/c-zhi-zi-fu-chuan/012.png" class title="结果"><p>C++ 中有大量的函数用来操作以 null 结尾的字符串：supports a wide range of functions that manipulate null-terminated strings:</p><img src="/2020/04/09/c-zhi-zi-fu-chuan/013.png" class title="结果"><p>下面的实例使用了上述的一些函数：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by MacosXcode on 2020/4/9.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"world"</span> <span class="token punctuation">;</span>    <span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//复制字符串str1到str3</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> str1<span class="token punctuation">)</span> <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"strcpy(str3, str1)"</span> <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接str1和str2</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span> <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"strcat(str1, str2):"</span> <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接后str1的总长度</span>    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"strlrn(str1):"</span> <span class="token operator">&lt;&lt;</span> len <span class="token operator">&lt;&lt;</span>endl <span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><img src="/2020/04/09/c-zhi-zi-fu-chuan/014.png" class title="结果"><blockquote><h2 id="C-中的-String-类"><a href="#C-中的-String-类" class="headerlink" title="C++ 中的 String 类"></a>C++ 中的 String 类</h2></blockquote><p>C++ 标准库提供了 <strong>string</strong> 类类型，支持上述所有的操作，另外还增加了其他更多的功能。我们将学习 C++ 标准库中的这个类，现在让我们先来看看下面这个实例：</p><p>现在您可能还无法透彻地理解这个实例，因为到目前为止我们还没有讨论类和对象。所以现在您可以只是粗略地看下这个实例，等理解了面向对象的概念之后再回头来理解这个实例。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by MacosXcode on 2020/4/9.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string str1 <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token punctuation">;</span>    string str2 <span class="token operator">=</span> <span class="token string">"world"</span> <span class="token punctuation">;</span>    string str3 <span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//复制str1到str3</span>    str3 <span class="token operator">=</span> str1 <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str3"</span> <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接str1和str2</span>    str3 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1 + str2:"</span> <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接后str3的总长度</span>    len <span class="token operator">=</span> str3<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str3的总长度: "</span> <span class="token operator">&lt;&lt;</span> len <span class="token operator">&lt;&lt;</span>endl <span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><img src="/2020/04/09/c-zhi-zi-fu-chuan/015.png" class title="结果"><blockquote><p>最后，晒一张家乡美景图</p></blockquote><img src="/2020/04/09/c-zhi-zi-fu-chuan/016.jpg" class title="结果">]]></content>
      
      
      <categories>
          
          <category> 后端语言C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之数组</title>
      <link href="/2020/04/06/c-zhi-shu-zu/"/>
      <url>/2020/04/06/c-zhi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="C-之数组"><a href="#C-之数组" class="headerlink" title="C++之数组"></a>C++之数组</h1><h2 id="1-什么是数组"><a href="#1-什么是数组" class="headerlink" title="1. 什么是数组"></a>1. 什么是数组</h2><p>数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。<br>数组的声明并不是声明一个个单独的变量，比如 number0、number1、…、number99，而是声明一个数组变量，比如 numbers，然后使用 numbers[0]、numbers[1]、…、numbers[99] 来代表一个个单独的变量。数组中的特定元素可以通过索引访问。</p><p>所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。</p><h2 id="2-声明数组"><a href="#2-声明数组" class="headerlink" title="2. 声明数组"></a>2. 声明数组</h2><p>在 C++ 中要声明一个数组，需要指定元素的类型和元素的数量，如下所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp">type arrayName <span class="token punctuation">[</span> arraySize <span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这叫做一维数组。<strong>arraySize</strong> 必须是一个大于零的整数常量，<strong>type</strong> 可以是任意有效的 C++ 数据类型。例如，要声明一个类型为 double 的包含 10 个元素的数组 <strong>array</strong>，声明语句如下：</p><pre><code>double balance[10];</code></pre><p>现在 <em>balance</em> 是一个可用的数组，可以容纳 10 个类型为 double 的数字。</p><h2 id="2-初始化数组"><a href="#2-初始化数组" class="headerlink" title="2. 初始化数组"></a>2. 初始化数组</h2><p>在 C++ 中，你可以逐个初始化数组，也可以使用一个初始化语句，如下所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">double</span> balance<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1000.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大括号 { } 之间的值的数目不能大于我们在数组声明时在方括号 [ ] 中指定的元素数目。</p><p>如果你省略掉了数组的大小，数组的大小则为初始化时元素的个数。因此，如果：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">double</span> balance<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1000.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你将创建一个数组，它与前一个实例中所创建的数组是完全相同的。下面是一个为数组中某个元素赋值的实例：</p><pre class="line-numbers language-cpp"><code class="language-cpp">balance<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50.0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述的语句把数组中第五个元素的值赋为 50.0。所有的数组都是以 0 作为它们第一个元素的索引，也被称为基索引，数组的最后一个索引是数组的总大小减去 1。以下是上面所讨论的数组的的图形表示：</p>{% asset_img 111.png 输出结果 %}<h2 id="3-访问数组元素"><a href="#3-访问数组元素" class="headerlink" title="3. 访问数组元素"></a>3. 访问数组元素</h2><p>数组元素可以通过数组名称加索引进行访问。元素的索引是放在方括号内，跟在数组名称的后边。例如：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">double</span> salary <span class="token operator">=</span> balance<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的语句将把数组中第 10 个元素的值赋给 salary 变量。下面的实例使用了上述的三个概念，即，声明数组、数组赋值、访问数组：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by MacosXcode on 2020/4/6.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> std <span class="token operator">::</span> setw <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//array_number是一个包含10个整数的数组</span>    <span class="token keyword">int</span> array_number<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        array_number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"element"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"value"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出数组中的每一个元素的值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> array_number<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的程序使用了 <strong>setw()</strong> 函数来格式化输出。当上面的代码被编译和执行时，它会产生下列结果：</p><img src="/2020/04/06/c-zhi-shu-zu/112.png" class title="输出结果"><h2 id="4-数组名是数组中第一个元素的地址"><a href="#4-数组名是数组中第一个元素的地址" class="headerlink" title="4. 数组名是数组中第一个元素的地址"></a>4. 数组名是数组中第一个元素的地址</h2><p>之前我们学习变量的时候，通过变量名访问到的是变量的值，但是数组属于复合类型，数组名是首元素的地址，数组名加索引号访问的是数组中与之对应的元素值。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by MacosXcode on 2020/4/6.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> ARRAY_LENGTH <span class="token operator">=</span> <span class="token number">9</span> <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> number_array <span class="token punctuation">[</span>ARRAY_LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"数组名代表的段基地址"</span> <span class="token operator">&lt;&lt;</span> number_array <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"数组首元素的地址"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>number_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> number_array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout  <span class="token operator">&lt;&lt;</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>number_array<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>number_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><img src="/2020/04/06/c-zhi-shu-zu/113.png" class title="输出结果"><p>对于以上代码，为什么数组名就代表首地址呢，比如int array[4],它的数组名array代表首地址，</p><p> 段及地址+偏移地址就能得到数组每个元素的地址。而array 就是段地址， 这个段地址的值根和第一个元素的地址是一样的，所以指向第一个元素，段地址中这跟汇编的寻址方式有异曲同工的地方，array代表一个首地址，然后加上偏移量,(0,1,2,3,4)对于整型数组，每个元素占四个字节，即第二个元素的地址值就是基地址再偏移4，以此类推，就可以访问到其他元素。</p><img src="/2020/04/06/c-zhi-shu-zu/16.png" class title="输出结果"><h2 id="5-C-多维数组"><a href="#5-C-多维数组" class="headerlink" title="5. C++多维数组"></a>5. C++多维数组</h2><p>C++ 支持多维数组。多维数组声明的一般形式如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">type name<span class="token punctuation">[</span>size1<span class="token punctuation">]</span><span class="token punctuation">[</span>size2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span>sizeN<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，下面的声明创建了一个三维 5 . 10 . 4 整型数组：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> threedim<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多维数组最简单的形式是二维数组。一个二维数组，在本质上，是一个一维数组的列表。声明一个 x 行 y 列的二维整型数组，形式如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">type arrayName <span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<strong>type</strong> 可以是任意有效的 C++ 数据类型，<strong>arrayName</strong> 是一个有效的 C++ 标识符。</p><p>一个二维数组可以被认为是一个带有 x 行和 y 列的表格。下面是一个二维数组，包含 3 行和 4 列：</p>{% asset_img 114.png 输出结果 %}<p>因此，数组中的每个元素是使用形式为 a[ i , j ] 的元素名称来标识的，其中 a 是数组名称，i 和 j 是唯一标识 a 中每个元素的下标。</p><p>初始化二维数组</p><p>多维数组可以通过在括号内为每行指定值来进行初始化。下面是一个带有 3 行 4 列的数组。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/*  初始化索引号为 0 的行 */</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/*  初始化索引号为 1 的行 */</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/*  初始化索引号为 2 的行 */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部嵌套的括号是可选的，下面的初始化与上面是等同的：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问二维数组元素</p><p>二维数组中的元素是通过使用下标（即数组的行索引和列索引）来访问的。例如：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> val <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的语句将获取数组中第 3 行第 4 个元素。您可以通过上面的示意图来进行验证。让我们来看看下面的程序，我们将使用嵌套循环来处理二维数组：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by MacosXcode on 2020/4/6.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一个五行二列的数组</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出数组中每个元素中的值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"]["</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">"]:"</span> <span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/04/06/c-zhi-shu-zu/155.png" class title="输出结果"><p>如上所述，您可以创建任意维度的数组，但是一般情况下，我们创建的数组是一维数组和二维数组。</p><h2 id="6-c-中指向数组的指针"><a href="#6-c-中指向数组的指针" class="headerlink" title="6. c++中指向数组的指针"></a>6. c++中指向数组的指针</h2><p>数组名是一个指向数组中第一个元素的常量指针。因此，在下面的声明中：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">double</span> balance<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>balance</strong> 是一个指向 &amp;balance[0] 的指针，即数组 balance 的第一个元素的地址。因此，下面的程序片段把 <strong>p</strong>赋值为 <strong>balance</strong> 的第一个元素的地址：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">double</span> balance<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p <span class="token operator">=</span> balance<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用数组名作为常量指针是合法的，反之亦然。因此，*(balance + 4) 是一种访问 balance[4] 数据的合法方式。</p><p>一旦您把第一个元素的地址存储在 p 中，您就可以使用 <em>p、</em>(p+1)、*(p+2) 等来访问数组元素。下面的实例演示了上面讨论到的这些概念：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by MacosXcode on 2020/4/6.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//带有5个元素的浮点型数组</span>    <span class="token keyword">double</span> balance<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1000.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">nullptr</span> <span class="token punctuation">;</span>    p <span class="token operator">=</span> balance <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出数组中每个元素的值</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"使用指针的数组值"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*(p + "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"):"</span> <span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"使用balance作为地址的数组值"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*(balance+"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span><span class="token string">"):"</span> <span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>balance <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/04/06/c-zhi-shu-zu/116.png" class title="输出结果"><h2 id="7-C-传递数组给函数"><a href="#7-C-传递数组给函数" class="headerlink" title="7. C++传递数组给函数"></a>7. C++传递数组给函数</h2><p>C++ 不允许向函数传递一个完整的数组作为参数，但是，你可以通过指定不带索引的数组名来传递一个指向数组的指针。</p><p>如果您想要在函数中传递一个一维数组作为参数，你必须以下面三种方式来声明函数形式参数，这三种声明方式的结果是一样的，因为每种方式都会告诉编译器将要接收一个整型指针。同样地，你也可以传递一个多维数组作为形式参数。</p><h3 id="7-1-方式1，形式参数是一个指针"><a href="#7-1-方式1，形式参数是一个指针" class="headerlink" title="7.1 方式1，形式参数是一个指针"></a>7.1 方式1，形式参数是一个指针</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>param<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-方式2，形式参数是一个已定义大小的数组"><a href="#7-2-方式2，形式参数是一个已定义大小的数组" class="headerlink" title="7.2 方式2，形式参数是一个已定义大小的数组"></a>7.2 方式2，形式参数是一个已定义大小的数组</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> param<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-方式3，-形式参数是一个未定义大小的数组"><a href="#7-3-方式3，-形式参数是一个未定义大小的数组" class="headerlink" title="7.3 方式3， 形式参数是一个未定义大小的数组"></a>7.3 方式3， 形式参数是一个未定义大小的数组</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token keyword">int</span> param<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，让我们来看下面这个函数，它把数组作为参数，同时还传递了另一个参数，根据所传的参数，会返回数组中各元素的平均值：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span>    i<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">double</span> avg<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  avg <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token operator">/</span> size<span class="token punctuation">;</span>  <span class="token keyword">return</span> avg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，让我们调用上面的函数，如下所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 函数声明</span><span class="token keyword">double</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 带有 5 个元素的整型数组</span>   <span class="token keyword">int</span> balance<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> avg<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 传递一个指向数组的指针作为参数</span>   avg <span class="token operator">=</span> <span class="token function">getAverage</span><span class="token punctuation">(</span> balance<span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 输出返回值</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"平均值是："</span> <span class="token operator">&lt;&lt;</span> avg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by MacosXcode on 2020/4/6.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数声明</span><span class="token keyword">double</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> size <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在主函数中调用getAverage</span>    <span class="token keyword">int</span> balance<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> avg <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//传递一个指向数组的指针作为参数</span>    avg <span class="token operator">=</span> <span class="token function">getAverage</span><span class="token punctuation">(</span>balance<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出返回值</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"平均值是"</span> <span class="token operator">&lt;&lt;</span> avg <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token keyword">double</span> avg <span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    avg <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token operator">/</span> size <span class="token punctuation">;</span>    <span class="token keyword">return</span> avg <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="/2020/04/06/c-zhi-shu-zu/117.png" class title="输出结果"><h2 id="8-C-从函数返回数组"><a href="#8-C-从函数返回数组" class="headerlink" title="8. C++从函数返回数组"></a>8. C++从函数返回数组</h2><p>C++ 不允许返回一个完整的数组作为函数的参数。但是，您可以通过指定不带索引的数组名来返回一个指向数组的指针。</p><p>如果你想要从函数返回一个一维数组，您必须声明一个返回指针的函数，如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，C++ 不支持在函数外返回局部变量的地址，除非定义局部变量为 <strong>static</strong> 变量。</p><p>现在，让我们来看下面的函数，它会生成 10 个随机数，并使用数组来返回它们，具体如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by MacosXcode on 2020/4/6.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;ctime></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 要生成和返回随机数的函数</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> r<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置种子</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> r <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在主函数中调用上面的函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个指向整数的指针</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*(p+"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"):"</span> <span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="/2020/04/06/c-zhi-shu-zu/118.png" class title="输出结果">]]></content>
      
      
      <categories>
          
          <category> 后端语言C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现月历打印</title>
      <link href="/2020/04/01/java-shi-xian-yue-li-da-yin/"/>
      <url>/2020/04/01/java-shi-xian-yue-li-da-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="用java实现打印任意年份的月历"><a href="#用java实现打印任意年份的月历" class="headerlink" title="用java实现打印任意年份的月历"></a>用java实现打印任意年份的月历</h2><h3 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> main<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author moschao * @date 2020/4/1 11:11 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">myFirstCalendar</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> year<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用来接收用户所输入的年份，先初始化为0；</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用来接收用户所输入的月份</span>        <span class="token keyword">int</span> alldays <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义一个求总天数的变量，初始赋值为0；用来累加总天数</span>        <span class="token keyword">int</span> yearnumber <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义一个基准变量时间年，待会赋初值为1900年，在它的基础上累加年，进而求年的天数；</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//待会用来打印月历的body</span>        <span class="token keyword">int</span> week <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//记录星期几</span>        <span class="token keyword">int</span> monthOfDay <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用来计算当月天数</span>        <span class="token keyword">boolean</span> isLeapYear <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义一个布尔型的变量，用来判断是平年还是闰年，等会要用到3次</span>        Scanner input <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入年份 :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提示用户输入年份</span>        input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            year <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用户输入后，把输入的值付给year</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入月份 :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提示用户输入月份</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            month <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用户输入后，把输入的值付给month</span>        <span class="token punctuation">}</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用户输入年份和月份后关闭输入</span>        <span class="token comment" spellcheck="true">/*        累加从1900年开始，到用户输入的年份结束为止的间隔的这些年的总天数         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>yearnumber <span class="token operator">=</span> <span class="token number">1900</span><span class="token punctuation">;</span> yearnumber <span class="token operator">&lt;</span> year<span class="token punctuation">;</span> yearnumber<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断从1900年开始，以后的每一年是否是闰年，一直到用户输入的前一年完</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>yearnumber <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> yearnumber <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>yearnumber <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                isLeapYear <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                isLeapYear <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeapYear<span class="token punctuation">)</span> <span class="token punctuation">{</span>                alldays <span class="token operator">=</span> alldays <span class="token operator">+</span> <span class="token number">366</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果是闰年，则加上366天</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                alldays<span class="token operator">=</span> alldays <span class="token operator">+</span> <span class="token number">365</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//否则，加上365天</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//计算月份的天数</span>        <span class="token comment" spellcheck="true">//判断用户所输入的年份是不是闰年；为待会计算用户所输入年份的月份天数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            isLeapYear <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> month<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//累计从1月开始到用户所输入的月份的前一个月的总天数</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//用switch分支语句判断月份的天数</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>                <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>                <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>                    <span class="token comment" spellcheck="true">//如果是以上几个月，则当月的总天数为31天</span>                    alldays <span class="token operator">=</span> alldays <span class="token operator">+</span> <span class="token number">31</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//如果是大月，在累加年的天数的基础上加上31；</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                    <span class="token comment" spellcheck="true">//如果是二月，则还需判断用户输入的年份是平年还是闰年</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeapYear<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        alldays <span class="token operator">=</span> alldays <span class="token operator">+</span> <span class="token number">29</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//如果是闰年，则加上29天</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        alldays <span class="token operator">=</span> alldays <span class="token operator">+</span> <span class="token number">28</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//平年，加上28天</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                alldays <span class="token operator">=</span> alldays <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//除了以上三种情况的所有情况，加上30</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//到这里，总天数就累加完成了，是分为两个部分来求和的</span>        <span class="token comment" spellcheck="true">//接下来计算用户输入的月份有多少天</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">//用switch()分支语句来确定用户输入的月份的天数；即要显示出来的天数</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">//如果用户输入的月份是以上几个数字的话；则等会显示打印31天</span>                monthOfDay <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">//判断用户输入的月份所在的年是不是闰年</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeapYear<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    monthOfDay <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//如果是闰年，待会打印29天</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    monthOfDay <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//否则，打印28天</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">//除以上3种情况的所有情况，等会打印30天</span>                monthOfDay <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token operator">+</span>year<span class="token operator">+</span><span class="token string">"年"</span><span class="token operator">+</span><span class="token string">"\t\t"</span><span class="token operator">+</span>month<span class="token operator">+</span><span class="token string">"月"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印月历的标题</span>        <span class="token comment" spellcheck="true">/*        以下代码是打印用户所输入月份的核心代码，         */</span>        week <span class="token operator">=</span> alldays <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算用户输入的月份的第一天是星期几，取值范围为0-6；打印时用\t来辅助</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一\t二\t三\t四\t五\t六\t日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印月历的星期数，从星期一开始到星期天</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> week<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//满足条件，先\t,如果week=0;则不打印</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">-</span> week<span class="token punctuation">)</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//打印月历的第一行</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//月历第一行打印完成，换行打印第二行，光标进入第二行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> monthOfDay<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//打印后面的月历的内容</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">+</span> week<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//打印到星期日就换行，然后继续打印</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的控制台输出如下：</p><p>先输入年份，再输入月份即可</p><img src="/2020/04/01/java-shi-xian-yue-li-da-yin/1.png" class title="我的截图">]]></content>
      
      
      <categories>
          
          <category> 后端语言java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之指针</title>
      <link href="/2020/03/31/c-zhi-zhi-zhen/"/>
      <url>/2020/03/31/c-zhi-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="c-之指针"><a href="#c-之指针" class="headerlink" title="c++之指针"></a>c++之指针</h1><h2 id="1-c-指针概述"><a href="#1-c-指针概述" class="headerlink" title="1. c++指针概述"></a>1. c++指针概述</h2><p>其实，早在c语言中我们就已经学习过指针了 ，C++也大差不差。说白了，指针就是地址，即指针变量它存储的内容是某一个内存单元的地址。那什么是地址呢？在计算机的内存中，一个字节，也就是8位称为一个内存单元，所有的内存单元以字节为单位整齐地排列着，每个单元都有一个编号，这个编号就叫做地址，0x开头，用十六进制数来表示。</p><p>每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址，要注意的是，指针它本身也有自己的地址。请看下面的实例，它将输出定义的变量地址：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by MacosXcode on 2020/3/31.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>  student<span class="token punctuation">;</span>    <span class="token keyword">int</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"student 变量的地址： "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>student <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name 数组变量的首地址： "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name[%d]的地址："</span> <span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout &lt;&lt; "name[i] 的地址：";</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的电脑打印结果如下图</p><img src="/2020/03/31/c-zhi-zhi-zhen/11.png" class title="运行结果"><p>整形数组name有10个元素，相邻两个元素之间的地址差值为4，是因为每个元素类型为int，占四个字节</p><h2 id="2-什么是指针"><a href="#2-什么是指针" class="headerlink" title="2. 什么是指针"></a>2. 什么是指针</h2><p><strong>指针</strong>是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：</p><pre class="line-numbers language-cpp"><code class="language-cpp">type <span class="token operator">*</span>var<span class="token operator">-</span>name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，<strong>type</strong> 是指针的基类型，它必须是一个有效的 C++ 数据类型，<strong>var-name</strong> 是指针变量的名称。用来声明指针的星号 * 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span>    <span class="token operator">*</span>ip<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 一个整型的指针 */</span><span class="token keyword">double</span> <span class="token operator">*</span>dp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 一个 double 型的指针 */</span><span class="token keyword">float</span>  <span class="token operator">*</span>fp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 一个浮点型的指针 */</span><span class="token keyword">char</span>   <span class="token operator">*</span>ch     <span class="token comment" spellcheck="true">/* 一个字符型的指针 */</span>string <span class="token operator">*</span>st     <span class="token comment" spellcheck="true">/*一个字符串指针*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。</p><h2 id="3-C-中使用指针"><a href="#3-C-中使用指针" class="headerlink" title="3. C++中使用指针"></a>3. C++中使用指针</h2><p>使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 ***** 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 实际变量的声明</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ip<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指针变量的声明</span>   ip <span class="token operator">=</span> <span class="token operator">&amp;</span>var<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 在指针变量中存储 var 的地址</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of var variable: "</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> var <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 输出在指针变量中存储的地址</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Address stored in ip variable: "</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> ip <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 访问指针中地址的值</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of *ip variable: "</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ip <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><img src="/2020/03/31/c-zhi-zhi-zhen/12.png" class title="运行结果"><h2 id="4-C-Null指针"><a href="#4-C-Null指针" class="headerlink" title="4 C++ Null指针"></a>4 C++ Null指针</h2><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为<strong>空</strong>指针。</p><p>NULL 指针是一个定义在标准库中的值为零的常量。请看下面的程序：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ptr 的值是 "</span> <span class="token operator">&lt;&lt;</span> ptr <span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如图</p><img src="/2020/03/31/c-zhi-zhi-zhen/13.png" class title="运行结果"><p>在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。</p><p>如需检查一个空指针，您可以使用 if 语句，如下所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* 如果 p 非空，则完成 */</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ptr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* 如果 p 为空，则完成 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-C-指针的运算"><a href="#5-C-指针的运算" class="headerlink" title="5. C++指针的运算"></a>5. C++指针的运算</h2><h3 id="5-1-C-指针的算术运算"><a href="#5-1-C-指针的算术运算" class="headerlink" title="5.1 C++指针的算术运算"></a>5.1 C++指针的算术运算</h3><p>指针是一个用数值表示的地址。因此，您可以对指针执行算术运算。可以对指针进行四种算术运算：++、–、+、-。</p><p>假设 <strong>ptr</strong> 是一个指向地址 1000 的整型指针，是一个 32 位的整数，让我们对该指针执行下列的算术运算：</p><pre class="line-numbers language-cpp"><code class="language-cpp">ptr<span class="token operator">++</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在执行完上述的运算之后，<strong>ptr</strong> 将指向位置 1004，因为 ptr 每增加一次，它都将指向下一个整数位置，即当前位置往后移 4 个字节。这个运算会在不影响内存位置中实际值的情况下，移动指针到下一个内存位置。如果 <strong>ptr</strong>指向一个地址为 1000 的字符，上面的运算会导致指针指向位置 1001，因为下一个字符位置是在 1001。</p><h3 id="5-2-递增一个指针"><a href="#5-2-递增一个指针" class="headerlink" title="5.2 递增一个指针"></a>5.2 递增一个指针</h3><p>我们喜欢在程序中使用指针代替数组，因为变量指针可以递增，而数组不能递增，因为数组是一个常量指针。下面的程序递增变量指针，以便顺序访问数组中的每一个元素：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 指针中的数组地址</span>   ptr <span class="token operator">=</span> var<span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"value of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 移动到下一个位置</span>      ptr<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下图</p><img src="/2020/03/31/c-zhi-zhi-zhen/14.png" class title="运行结果"><h3 id="5-3-递减一个指针"><a href="#5-3-递减一个指针" class="headerlink" title="5.3 递减一个指针"></a>5.3 递减一个指针</h3><p>同样地，对指针进行递减运算，即把值减去其数据类型的字节数，如下所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 指针中最后一个元素的地址</span>   ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>var<span class="token punctuation">[</span>MAX<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> MAX<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Address of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 移动到下一个位置</span>      ptr<span class="token operator">--</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如图</p><img src="/2020/03/31/c-zhi-zhi-zhen/15.png" class title="运行结果"><h3 id="5-4-指针的比较"><a href="#5-4-指针的比较" class="headerlink" title="5.4 指针的比较"></a>5.4 指针的比较</h3><p>指针可以用关系运算符进行比较，如 ==、&lt; 和 &gt;。如果 p1 和 p2 指向两个相关的变量，比如同一个数组中的不同元素，则可对 p1 和 p2 进行大小比较。</p><p>下面的程序修改了上面的实例，只要变量指针所指向的地址小于或等于数组的最后一个元素的地址 &amp;var[MAX - 1]，则把变量指针进行递增：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 指针中第一个元素的地址</span>   ptr <span class="token operator">=</span> var<span class="token punctuation">;</span>   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span> ptr <span class="token operator">&lt;=</span> <span class="token operator">&amp;</span>var<span class="token punctuation">[</span>MAX <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Address of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 指向上一个位置</span>      ptr<span class="token operator">++</span><span class="token punctuation">;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如图</p><img src="/2020/03/31/c-zhi-zhi-zhen/16.png" class title="运行结果"><h2 id="6-指针vs数组"><a href="#6-指针vs数组" class="headerlink" title="6 指针vs数组"></a>6 指针vs数组</h2><p>指针和数组是密切相关的。事实上，指针和数组在很多情况下是可以互换的。例如，一个指向数组开头的指针，可以通过使用指针的算术运算或数组索引来访问数组。请看下面的程序：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 指针中的数组地址</span>   ptr <span class="token operator">=</span> var<span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Address of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 移动到下一个位置</span>      ptr<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而，指针和数组并不是完全互换的。例如，请看下面的程序：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token operator">*</span>var <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这是正确的语法</span>      var<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 这是不正确的</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把指针运算符 * 应用到 var 上是完全可以接受的，但修改 var 的值是非法的。这是因为 var 是一个指向数组开头的常量，不能作为左值。</p><p>由于一个数组名对应一个指针常量，只要不改变数组的值，仍然可以用指针形式的表达式。例如，下面是一个有效的语句，把 var[2] 赋值为 500：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">*</span><span class="token punctuation">(</span>var <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的语句是有效的，且能成功编译，因为 var 未改变。</p><h2 id="7-指针数组"><a href="#7-指针数组" class="headerlink" title="7 指针数组"></a>7 指针数组</h2><p>在我们讲解指针数组的概念之前，先让我们来看一个实例，它用到了一个由 3 个整数组成的数组：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> var<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre class="line-numbers language-cpp"><code class="language-cpp">Value of var<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>Value of var<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>Value of var<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可能有一种情况，我们想要让数组存储指向 int 或 char 或其他数据类型的指针。下面是一个指向整数的指针数组的声明：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，把 <strong>ptr</strong> 声明为一个数组，由 MAX 个整数指针组成。因此，ptr 中的每个元素，都是一个指向 int 值的指针。下面的实例用到了三个整数，它们将存储在一个指针数组中，如下所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>var<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 赋值为整数的地址</span>   <span class="token punctuation">}</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of var["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><img src="/2020/03/31/c-zhi-zhi-zhen/17.png" class title="运行结果"><p>你也可以用一个指向字符的指针数组来存储一个字符串列表，如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>names<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>                   <span class="token string">"Zara Ali"</span><span class="token punctuation">,</span>                   <span class="token string">"Hina Ali"</span><span class="token punctuation">,</span>                   <span class="token string">"Nuha Ali"</span><span class="token punctuation">,</span>                   <span class="token string">"Sara Ali"</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of names["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"] = "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><img src="/2020/03/31/c-zhi-zhi-zhen/18.png" class title="运行结果"><h2 id="8-指向指针的指针"><a href="#8-指向指针的指针" class="headerlink" title="8 指向指针的指针"></a>8 指向指针的指针</h2><p>指向指针的指针是一种多级间接寻址的形式，或者说是一个指针链。通常，一个指针包含一个变量的地址。当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。</p><p>一个指向指针的指针变量必须如下声明，即在变量名前放置两个星号。例如，下面声明了一个指向 int 类型指针的指针：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>var<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当一个目标值被一个指针间接指向到另一个指针时，访问这个值需要使用两个星号运算符，如下面实例所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span>  var<span class="token punctuation">;</span>   <span class="token keyword">int</span>  <span class="token operator">*</span>ptr<span class="token punctuation">;</span>   <span class="token keyword">int</span>  <span class="token operator">*</span><span class="token operator">*</span>pptr<span class="token punctuation">;</span>   var <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取 var 的地址</span>   ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>var<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用运算符 &amp; 获取 ptr 的地址</span>   pptr <span class="token operator">=</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 使用 pptr 获取值</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of var :"</span> <span class="token operator">&lt;&lt;</span> var <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value available at *ptr :"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value available at **pptr :"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token operator">*</span>pptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre><code>Value of var = 3000Value available at *ptr = 3000Value available at **pptr = 3000</code></pre><h2 id="9-C-传递指针给函数"><a href="#9-C-传递指针给函数" class="headerlink" title="9 C++ 传递指针给函数"></a>9 C++ 传递指针给函数</h2><p>C++ 允许你传递指针给函数，只需要简单地声明函数参数为指针类型即可。</p><p>下面的实例中，我们传递一个无符号的 long 型指针给函数，并在函数内改变这个值：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>par<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sec<span class="token punctuation">;</span>   <span class="token function">getSeconds</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>sec <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 输出实际值</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Number of seconds :"</span> <span class="token operator">&lt;&lt;</span> sec <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>par<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 获取当前的秒数</span>   <span class="token operator">*</span>par <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/03/31/c-zhi-zhi-zhen/19.png" class title="运行结果"><p>能接受指针作为参数的函数，也能接受数组作为参数，如下所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 函数声明</span><span class="token keyword">double</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 带有 5 个元素的整型数组</span>   <span class="token keyword">int</span> balance<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> avg<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 传递一个指向数组的指针作为参数</span>   avg <span class="token operator">=</span> <span class="token function">getAverage</span><span class="token punctuation">(</span> balance<span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 输出返回值</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Average value is: "</span> <span class="token operator">&lt;&lt;</span> avg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span>    i<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">double</span> avg<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  avg <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token operator">/</span> size<span class="token punctuation">;</span>  <span class="token keyword">return</span> avg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp">Average value is<span class="token operator">:</span> <span class="token number">214.4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="10-C-从函数返回指针"><a href="#10-C-从函数返回指针" class="headerlink" title="10 C++ 从函数返回指针"></a>10 C++ 从函数返回指针</h2><p>C++ 允许你从函数返回指针。为了做到这点，你必须声明一个返回指针的函数，如下所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，C++ 不支持在函数外返回局部变量的地址，除非定义局部变量为 <strong>static</strong> 变量。</p><p>现在，让我们来看下面的函数，它会生成 10 个随机数，并使用表示指针的数组名（即第一个数组元素的地址）来返回它们，具体如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 要生成和返回随机数的函数</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">getRandom</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">int</span>  r<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置种子</span>  <span class="token function">srand</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 要调用上面定义函数的主函数</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 一个指向整数的指针</span>   <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>   p <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>       cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*(p + "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">") : "</span><span class="token punctuation">;</span>       cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">624723190</span><span class="token number">1468735695</span><span class="token number">807113585</span><span class="token number">976495677</span><span class="token number">613357504</span><span class="token number">1377296355</span><span class="token number">1530315259</span><span class="token number">1778906708</span><span class="token number">1820354158</span><span class="token number">667126415</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">624723190</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1468735695</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">807113585</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">976495677</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">613357504</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1377296355</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1530315259</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1778906708</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1820354158</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">667126415</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后晒一张家乡晚景图</p><img src="/2020/03/31/c-zhi-zhi-zhen/os.jpg" class title="乡村田野">]]></content>
      
      
      <categories>
          
          <category> 后端语言C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang中反射reflect示例</title>
      <link href="/2020/03/15/golang-zhong-fan-she-reflect-shi-li/"/>
      <url>/2020/03/15/golang-zhong-fan-she-reflect-shi-li/</url>
      
        <content type="html"><![CDATA[<h1 id="golang中的反射reflect示例"><a href="#golang中的反射reflect示例" class="headerlink" title="golang中的反射reflect示例"></a>golang中的反射reflect示例</h1><h2 id="编程语言中反射的概念"><a href="#编程语言中反射的概念" class="headerlink" title="编程语言中反射的概念"></a>编程语言中反射的概念</h2><p>在计算机科学领域，反射是指一类应用，它们能够自描述和自控制。也就是说，这类应用通过采用某种机制来实现对自己行为的描述（self-representation）和监测（examination），并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。</p><p>每种语言的反射模型都不同，并且有些语言根本不支持反射。Golang语言实现了反射，反射机制就是在运行时动态的调用对象的方法和属性，官方自带的reflect包就是反射相关的，只要包含这个包就可以使用。</p><p>多插一句，Golang的gRPC也是通过反射实现的。</p><h2 id="interface和反射"><a href="#interface和反射" class="headerlink" title="interface和反射"></a>interface和反射</h2><p>在讲反射之前，先来看看Golang关于类型设计的一些原则</p><ul><li>变量包括（type, value）两部分<ul><li>理解这一点就知道为什么nil != nil了</li></ul></li><li>type 包括 static type和concrete type. 简单来说 static type是你在编码是看见的类型(如int、string)，concrete type是runtime系统看见的类型</li><li>类型断言能否成功，取决于变量的concrete type，而不是static type. 因此，一个 reader变量如果它的concrete type也实现了write方法的话，它也可以被类型断言为writer.</li></ul><p>接下来要讲的反射，就是建立在类型之上的，Golang的指定类型的变量的类型是静态的（也就是指定int、string这些的变量，它的type是static type），在创建变量的时候就已经确定，反射主要与Golang的interface类型相关（它的type是concrete type），只有interface类型才有反射一说。</p><p>在Golang的实现中，每个interface变量都有一个对应pair，pair中记录了实际变量的值和类型:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>value是实际变量值，type是实际变量的类型。一个interface{}类型的变量包含了2个指针，一个指针指向值的类型【对应concrete type】，另外一个指针指向实际的值【对应value】。例如，创建类型为*os.File的变量，然后将其赋给一个接口变量r：</p><pre class="line-numbers language-go"><code class="language-go">tty<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token string">"/dev/tty"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_RDWR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">var</span> r io<span class="token punctuation">.</span>Readerr <span class="token operator">=</span> tty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接口变量r的pair中将记录如下信息：(tty, *os.File)，这个pair在接口变量的连续赋值过程中是不变的，将接口变量r赋给另一个接口变量w:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> w io<span class="token punctuation">.</span>Writerw <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接口变量w的pair与r的pair相同，都是:(tty, *os.File)，即使w是空接口类型，pair也是不变的。</p><p>interface及其pair的存在，是Golang中实现反射的前提，理解了pair，就更容易理解反射。反射就是用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。</p><h2 id="golang的反射reflect"><a href="#golang的反射reflect" class="headerlink" title="golang的反射reflect"></a>golang的反射reflect</h2><h3 id="reflect的基本功能TypeOf和ValueOf"><a href="#reflect的基本功能TypeOf和ValueOf" class="headerlink" title="reflect的基本功能TypeOf和ValueOf"></a>reflect的基本功能TypeOf和ValueOf</h3><p>既然反射就是用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。那么在Golang的reflect反射包中有什么样的方式可以让我们直接获取到变量内部的信息呢？ 它提供了两种类型（或者说两个方法）让我们可以很容易的访问接口变量内容，分别是reflect.ValueOf() 和 reflect.TypeOf()，看看官方的解释</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ValueOf returns a new Value initialized to the concrete value</span><span class="token comment" spellcheck="true">// stored in the interface i.  ValueOf(nil) returns the zero </span><span class="token keyword">func</span> <span class="token function">ValueOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Value <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>翻译一下：ValueOf用来获取输入参数接口中的数据的值，如果接口为空则返回<span class="token number">0</span><span class="token comment" spellcheck="true">// TypeOf returns the reflection Type that represents the dynamic type of i.</span><span class="token comment" spellcheck="true">// If i is a nil interface value, TypeOf returns nil.</span><span class="token keyword">func</span> <span class="token function">TypeOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Type <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>翻译一下：TypeOf用来动态获取输入参数接口中的值的类型，如果接口为空则返回<span class="token boolean">nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>reflect.TypeOf()是获取pair中的type，reflect.ValueOf()获取pair中的value，示例如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.2345</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"type: "</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value: "</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>运行结果<span class="token punctuation">:</span><span class="token keyword">type</span><span class="token punctuation">:</span>  <span class="token builtin">float64</span>value<span class="token punctuation">:</span>  <span class="token number">1.2345</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li><p>reflect.TypeOf： 直接给到了我们想要的type类型，如float64、int、各种pointer、struct 等等真实的类型</p></li><li><p>reflect.ValueOf：直接给到了我们想要的具体的值，如1.2345这个具体数值，或者类似&amp;{1 “Allen.Wu” 25} 这样的结构体struct的值</p></li><li><p>也就是说明反射可以将“接口类型变量”转换为“反射类型对象”，反射类型指的是reflect.Type和reflect.Value这两种</p></li></ol><h3 id="从relfect-Value中获取接口interface的信息"><a href="#从relfect-Value中获取接口interface的信息" class="headerlink" title="从relfect.Value中获取接口interface的信息"></a>从relfect.Value中获取接口interface的信息</h3><p>当执行reflect.ValueOf(interface)之后，就得到了一个类型为”relfect.Value”变量，可以通过它本身的Interface()方法获得接口变量的真实内容，然后可以通过类型判断进行转换，转换为原有真实类型。不过，我们可能是已知原有类型，也有可能是未知原有类型，因此，下面分两种情况进行说明。</p><h4 id="已知原有类型【进行“强制转换”】"><a href="#已知原有类型【进行“强制转换”】" class="headerlink" title="已知原有类型【进行“强制转换”】"></a>已知原有类型【进行“强制转换”】</h4><p>已知类型后转换为其对应的类型的做法如下，直接通过Interface方法然后强制转换，如下：</p><pre class="line-numbers language-go"><code class="language-go">realValue <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>已知的类型<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.2345</span>    pointer <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span>    value <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 可以理解为“强制转换”，但是需要注意的时候，转换的时候，如果转换的类型不完全符合，则直接panic</span>    <span class="token comment" spellcheck="true">// Golang 对类型要求非常严格，类型一定要完全符合</span>    <span class="token comment" spellcheck="true">// 如下两个，一个是*float64，一个是float64，如果弄混，则会panic</span>    convertPointer <span class="token operator">:=</span> pointer<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">float64</span><span class="token punctuation">)</span>    convertValue <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>convertPointer<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>convertValue<span class="token punctuation">)</span><span class="token punctuation">}</span>运行结果：<span class="token number">0xc42000e238</span><span class="token number">1.2345</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h5><ol><li>转换的时候，如果转换的类型不完全符合，则直接panic，类型要求非常严格！</li><li>转换的时候，要区分是指针还是指</li><li>也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量”</li></ol><h4 id="未知原有类型【遍历探测其Filed】"><a href="#未知原有类型【遍历探测其Filed】" class="headerlink" title="未知原有类型【遍历探测其Filed】"></a>未知原有类型【遍历探测其Filed】</h4><p>很多情况下，我们可能并不知道其具体类型，那么这个时候，该如何做呢？需要我们进行遍历探测其Filed来得知，示例如下:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Id   <span class="token builtin">int</span>    Name <span class="token builtin">string</span>    Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u User<span class="token punctuation">)</span> <span class="token function">ReflectCallFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Allen.Wu ReflectCallFunc"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    user <span class="token operator">:=</span> User<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Allen.Wu"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span>    <span class="token function">DoFiledAndMethod</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过接口来获取任意参数，然后一一揭晓</span><span class="token keyword">func</span> <span class="token function">DoFiledAndMethod</span><span class="token punctuation">(</span>input <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    getType <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"get Type is :"</span><span class="token punctuation">,</span> getType<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    getValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"get all Fields is:"</span><span class="token punctuation">,</span> getValue<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取方法字段</span>    <span class="token comment" spellcheck="true">// 1. 先获取interface的reflect.Type，然后通过NumField进行遍历</span>    <span class="token comment" spellcheck="true">// 2. 再通过reflect.Type的Field获取其Field</span>    <span class="token comment" spellcheck="true">// 3. 最后通过Field的Interface()得到对应的value</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> getType<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        field <span class="token operator">:=</span> getType<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        value <span class="token operator">:=</span> getValue<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s: %v = %v\n"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> field<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取方法</span>    <span class="token comment" spellcheck="true">// 1. 先获取interface的reflect.Type，然后通过.NumMethod进行遍历</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> getType<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        m <span class="token operator">:=</span> getType<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s: %v\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> m<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：get Type is <span class="token punctuation">:</span> Userget all Fields is<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span> Allen<span class="token punctuation">.</span>Wu <span class="token number">25</span><span class="token punctuation">}</span>Id<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>Name<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> Allen<span class="token punctuation">.</span>WuAge<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">25</span>ReflectCallFunc<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>main<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h5><p>通过运行结果可以得知获取未知类型的interface的具体变量及其类型的步骤为：</p><ol><li>先获取interface的reflect.Type，然后通过NumField进行遍历</li><li>再通过reflect.Type的Field获取其Field</li><li>最后通过Field的Interface()得到对应的value</li></ol><p>通过运行结果可以得知获取未知类型的interface的所属方法（函数）的步骤为：</p><ol><li>先获取interface的reflect.Type，然后通过NumMethod进行遍历</li><li>再分别通过reflect.Type的Method获取对应的真实的方法（函数）</li><li>最后对结果取其Name和Type得知具体的方法名</li><li>也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量”</li><li>struct 或者 struct 的嵌套都是一样的判断处理方式</li></ol><h3 id="通过reflect-Value设置实际变量的值"><a href="#通过reflect-Value设置实际变量的值" class="headerlink" title="通过reflect.Value设置实际变量的值"></a>通过reflect.Value设置实际变量的值</h3><p>reflect.Value是通过reflect.ValueOf(X)获得的，只有当X是指针的时候，才可以通过reflec.Value修改实际变量X的值，即：要修改反射类型的对象就一定要保证其值是“addressable”的。</p><p>示例如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">1.2345</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"old value of pointer:"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 通过reflect.ValueOf获取num中的reflect.Value，注意，参数必须是指针才能修改其值</span>    pointer <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span>    newValue <span class="token operator">:=</span> pointer<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"type of pointer:"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"settability of pointer:"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 重新赋值</span>    newValue<span class="token punctuation">.</span><span class="token function">SetFloat</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"new value of pointer:"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">////////////////////</span>    <span class="token comment" spellcheck="true">// 如果reflect.ValueOf的参数不是指针，会如何？</span>    pointer <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//newValue = pointer.Elem() // 如果非指针，这里直接panic，“panic: reflect: call of reflect.Value.Elem on float64 Value”</span><span class="token punctuation">}</span>运行结果：old value of pointer<span class="token punctuation">:</span> <span class="token number">1.2345</span><span class="token keyword">type</span> of pointer<span class="token punctuation">:</span> <span class="token builtin">float64</span>settability of pointer<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token builtin">new</span> value of pointer<span class="token punctuation">:</span> <span class="token number">77</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><ol><li>需要传入的参数是* float64这个指针，然后可以通过pointer.Elem()去获取所指向的Value，<strong>注意一定要是指针</strong>。</li><li>如果传入的参数不是指针，而是变量，那么<ul><li>通过Elem获取原始值对应的对象则直接panic</li><li>通过CanSet方法查询是否可以设置返回false</li></ul></li><li>newValue.CantSet()表示是否可以重新设置其值，如果输出的是true则可修改，否则不能修改，修改完之后再进行打印发现真的已经修改了。</li><li>reflect.Value.Elem() 表示获取原始值对应的反射对象，只有原始对象才能修改，当前反射对象是不能修改的</li><li>也就是说如果要修改反射类型对象，其值必须是“addressable”【对应的要传入的是指针，同时要通过Elem方法获取原始值对应的反射对象】</li><li>struct 或者 struct 的嵌套都是一样的判断处理方式</li></ol><h3 id="通过reflect-ValueOf来进行方法的调用"><a href="#通过reflect-ValueOf来进行方法的调用" class="headerlink" title="通过reflect.ValueOf来进行方法的调用"></a>通过reflect.ValueOf来进行方法的调用</h3><p>这算是一个高级用法了，前面我们只说到对类型、变量的几种反射的用法，包括如何获取其值、其类型、如果重新设置新值。但是在工程应用中，另外一个常用并且属于高级的用法，就是通过reflect来进行方法【函数】的调用。比如我们要做框架工程的时候，需要可以随意扩展方法，或者说用户可以自定义方法，那么我们通过什么手段来扩展让用户能够自定义呢？关键点在于用户的自定义方法是未可知的，因此我们可以通过reflect来搞定</p><p>示例如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span><span class="token punctuation">)</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Id   <span class="token builtin">int</span>    Name <span class="token builtin">string</span>    Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u User<span class="token punctuation">)</span> <span class="token function">ReflectCallFuncHasArgs</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ReflectCallFuncHasArgs name: "</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">", age:"</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token string">"and origal User.Name:"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u User<span class="token punctuation">)</span> <span class="token function">ReflectCallFuncNoArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ReflectCallFuncNoArgs"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如何通过反射来进行方法的调用？</span><span class="token comment" spellcheck="true">// 本来可以用u.ReflectCallFuncXXX直接调用的，但是如果要通过反射，那么首先要将方法注册，也就是MethodByName，然后通过反射调动mv.Call</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    user <span class="token operator">:=</span> User<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Allen.Wu"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1. 要通过反射来调用起对应的方法，必须要先通过reflect.ValueOf(interface)来获取到reflect.Value，得到“反射类型对象”后才能做下一步处理</span>    getValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 一定要指定参数为正确的方法名</span>    <span class="token comment" spellcheck="true">// 2. 先看看带有参数的调用方法</span>    methodValue <span class="token operator">:=</span> getValue<span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">"ReflectCallFuncHasArgs"</span><span class="token punctuation">)</span>    args <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token string">"wudebao"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    methodValue<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 一定要指定参数为正确的方法名</span>    <span class="token comment" spellcheck="true">// 3. 再看看无参数的调用方法</span>    methodValue <span class="token operator">=</span> getValue<span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">"ReflectCallFuncNoArgs"</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    methodValue<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span>运行结果：ReflectCallFuncHasArgs name<span class="token punctuation">:</span>  wudebao <span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">30</span> and origal User<span class="token punctuation">.</span>Name<span class="token punctuation">:</span> Allen<span class="token punctuation">.</span>WuReflectCallFuncNoArgs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><ol><li>要通过反射来调用起对应的方法，必须要先通过reflect.ValueOf(interface)来获取到reflect.Value，得到“反射类型对象”后才能做下一步处理</li><li>reflect.Value.MethodByName这.MethodByName，需要指定准确真实的方法名字，如果错误将直接panic，MethodByName返回一个函数值对应的reflect.Value方法的名字。</li><li>[]reflect.Value，这个是最终需要调用的方法的参数，可以没有或者一个或者多个，根据实际参数来定。</li><li>reflect.Value的 Call 这个方法，这个方法将最终调用真实的方法，参数务必保持一致，如果reflect.Value’Kind不是一个方法，那么将直接panic。</li><li>本来可以用u.ReflectCallFuncXXX直接调用的，但是如果要通过反射，那么首先要将方法注册，也就是MethodByName，然后通过反射调用methodValue.Call</li></ol><h2 id="Golang的反射reflect性能"><a href="#Golang的反射reflect性能" class="headerlink" title="Golang的反射reflect性能"></a>Golang的反射reflect性能</h2><p>Golang的反射很慢，这个和它的API设计有关。在 java 里面，我们一般使用反射都是这样来弄的。</p><pre class="line-numbers language-java"><code class="language-java">Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个取得的反射对象类型是 java.lang.reflect.Field。它是可以复用的。只要传入不同的obj，就可以取得这个obj上对应的 field。</p><p>但是Golang的反射不是这样设计的:</p><pre class="line-numbers language-go"><code class="language-go">type_ <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>field<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> type_<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里取出来的 field 对象是 reflect.StructField 类型，但是它没有办法用来取得对应对象上的值。如果要取值，得用另外一套对object，而不是type的反射</p><pre class="line-numbers language-go"><code class="language-go">type_ <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>fieldValue <span class="token operator">:=</span> type_<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里取出来的 fieldValue 类型是 reflect.Value，它是一个具体的值，而不是一个可复用的反射对象了，每次反射都需要malloc这个reflect.Value结构体，并且还涉及到GC。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Golang reflect慢主要有两个原因</p><ol><li>涉及到内存分配以及后续的GC；</li><li>reflect实现里面有大量的枚举，也就是for循环，比如类型之类的。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述详细说明了Golang的反射reflect的各种功能和用法，都附带有相应的示例，相信能够在工程应用中进行相应实践，总结一下就是：</p><ul><li><p>反射可以大大提高程序的灵活性，使得interface{}有更大的发挥余地</p><ul><li>反射必须结合interface才玩得转</li><li>变量的type要是concrete type的（也就是interface变量）才有反射一说</li></ul></li><li><p>反射可以将“接口类型变量”转换为“反射类型对象”</p><ul><li>反射使用 TypeOf 和 ValueOf 函数从接口中获取目标对象信息</li></ul></li><li><p>反射可以将“反射类型对象”转换为“接口类型变量</p><ul><li>reflect.value.Interface().(已知的类型)</li><li>遍历reflect.Type的Field获取其Field</li></ul></li><li><p>反射可以修改反射类型对象，但是其值必须是“addressable”</p><ul><li>想要利用反射修改对象状态，前提是 interface.data 是 settable,即 pointer-interface</li></ul></li><li><p>通过反射可以“动态”调用方法</p></li><li><p>因为Golang本身不支持模板，因此在以往需要使用模板的场景下往往就需要使用反射(reflect)来实现</p></li></ul><img src="/2020/03/15/golang-zhong-fan-she-reflect-shi-li/reflect.png" class title="这是我的截图"><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.golang.org/laws-of-reflection" target="_blank" rel="noopener">The Go Blog</a> : 其实看官方说明就足以了！</li><li><a href="https://golang.org/pkg/reflect/#Kind" target="_blank" rel="noopener">官方reflect-Kind</a></li><li><a href="http://www.jb51.net/article/90021.htm" target="_blank" rel="noopener">Go语言的反射三定律</a></li><li><a href="https://studygolang.com/articles/11287" target="_blank" rel="noopener">Go基础学习五之接口interface、反射reflection</a></li><li><a href="https://studygolang.com/articles/12349" target="_blank" rel="noopener">提高 golang 的反射性能</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ips</title>
      <link href="/2020/03/13/ips/"/>
      <url>/2020/03/13/ips/</url>
      
        <content type="html"><![CDATA[<h1 id="使用golang获取本机ip"><a href="#使用golang获取本机ip" class="headerlink" title="使用golang获取本机ip"></a>使用golang获取本机ip</h1><h2 id="话不多说，直接上代码"><a href="#话不多说，直接上代码" class="headerlink" title="话不多说，直接上代码"></a>话不多说，直接上代码</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment" spellcheck="true">// 获取本机全部网卡的全部IP</span><span class="token comment" spellcheck="true">// 2020-03-12 16:52</span><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"fyne.io/fyne/app"</span>    <span class="token string">"fyne.io/fyne/widget"</span>    <span class="token string">"net"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取全部网卡的全部IP</span><span class="token keyword">func</span> <span class="token function">Ips</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ips <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回 interface 结构体对象的列表，包含了全部网卡信息</span>    interfaces<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Interfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历全部网卡</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> interfaces <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Addrs() 方法返回一个网卡上全部的IP列表</span>        address<span class="token punctuation">,</span> err <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token function">Addrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//遍历一个网卡上全部的IP列表，组合为一个字符串，放入对应网卡名称的map中</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> address <span class="token punctuation">{</span>            ips<span class="token punctuation">[</span>i<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ips<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ips <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    ips<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">Ips</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> ipstring <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">//key是网卡名称，value是网卡IP</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ips <span class="token punctuation">{</span>        ipstring <span class="token operator">+=</span> <span class="token string">"adapter name: "</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">"  IP: "</span> <span class="token operator">+</span> v <span class="token operator">+</span> <span class="token string">"\n"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用 fyne 画到 GUI 界面上</span>    myApp <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    myWindow <span class="token operator">:=</span> myApp<span class="token punctuation">.</span><span class="token function">NewWindow</span><span class="token punctuation">(</span><span class="token string">"Network Info"</span><span class="token punctuation">)</span>    myWindow<span class="token punctuation">.</span><span class="token function">SetContent</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span><span class="token function">NewLabel</span><span class="token punctuation">(</span>ipstring<span class="token punctuation">)</span><span class="token punctuation">)</span>    myWindow<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    myApp<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">tidyUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">tidyUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Exited"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如图</p><img src="/2020/03/13/ips/ip.jpg" class title="This is an example image">]]></content>
      
      
      <categories>
          
          <category> 编程语言golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
