<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ips</title>
      <link href="/2020/03/13/ips/"/>
      <url>/2020/03/13/ips/</url>
      
        <content type="html"><![CDATA[<h1 id="使用golang获取本机ip"><a href="#使用golang获取本机ip" class="headerlink" title="使用golang获取本机ip"></a>使用golang获取本机ip</h1><h2 id="话不多说，直接上代码"><a href="#话不多说，直接上代码" class="headerlink" title="话不多说，直接上代码"></a>话不多说，直接上代码</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment" spellcheck="true">// 获取本机全部网卡的全部IP</span><span class="token comment" spellcheck="true">// 2020-03-12 16:52</span><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"fyne.io/fyne/app"</span>    <span class="token string">"fyne.io/fyne/widget"</span>    <span class="token string">"net"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取全部网卡的全部IP</span><span class="token keyword">func</span> <span class="token function">Ips</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ips <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回 interface 结构体对象的列表，包含了全部网卡信息</span>    interfaces<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Interfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历全部网卡</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> interfaces <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Addrs() 方法返回一个网卡上全部的IP列表</span>        address<span class="token punctuation">,</span> err <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token function">Addrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//遍历一个网卡上全部的IP列表，组合为一个字符串，放入对应网卡名称的map中</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> address <span class="token punctuation">{</span>            ips<span class="token punctuation">[</span>i<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">+=</span> v<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ips<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ips <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>    ips<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">Ips</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> ipstring <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">//key是网卡名称，value是网卡IP</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ips <span class="token punctuation">{</span>        ipstring <span class="token operator">+=</span> <span class="token string">"adapter name: "</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">"  IP: "</span> <span class="token operator">+</span> v <span class="token operator">+</span> <span class="token string">"\n"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用 fyne 画到 GUI 界面上</span>    myApp <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    myWindow <span class="token operator">:=</span> myApp<span class="token punctuation">.</span><span class="token function">NewWindow</span><span class="token punctuation">(</span><span class="token string">"Network Info"</span><span class="token punctuation">)</span>    myWindow<span class="token punctuation">.</span><span class="token function">SetContent</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span><span class="token function">NewLabel</span><span class="token punctuation">(</span>ipstring<span class="token punctuation">)</span><span class="token punctuation">)</span>    myWindow<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    myApp<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">tidyUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">tidyUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Exited"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如图</p><img src="/2020/03/13/ips/03/13/ips/ip.jpg" class title="avatar">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>golang</title>
      <link href="/2020/02/29/golang/"/>
      <url>/2020/02/29/golang/</url>
      
        <content type="html"><![CDATA[<h1 id="golang的基本语法"><a href="#golang的基本语法" class="headerlink" title="golang的基本语法"></a>golang的基本语法</h1><h2 id="变量的来历"><a href="#变量的来历" class="headerlink" title="变量的来历"></a>变量的来历</h2><p>程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。</p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><pre class="line-numbers language-bash"><code class="language-bash">$ 变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><pre><code>import &quot;sync&quot;import &quot;sync/atomic&quot;var initialized uint32... // 此处省略func GetInstance() *singleton {if atomic.LoadUInt32(&amp;initialized) == 1 {  // 原子操作         return instance  }mu.Lock()defer mu.Unlock()if initialized == 0 {     instance = &amp;singleton{}     atomic.StoreUint32(&amp;initialized, 1)}return instance</code></pre><p>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/28/hello-world/"/>
      <url>/2019/11/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
